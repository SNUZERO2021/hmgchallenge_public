import numpy as np

def compute_linear(A,b):
    U, s, V = np.linalg.svd(A, full_matrices=False)
    t = np.dot(U.T, b)
    t = np.dot(np.diag(1/s),t)
    t = np.dot(V.T, t)
    return t

def compute_h(p1, p2):
    n, _ = p1.shape
    A = np.zeros((2*n,8))
    b = np.ndarray((2*n,1))
    p1 = np.c_[p1, np.ones(n)]
    p2 = np.c_[p2, np.ones(n)]

    for i in range(n):
        A[2*i,0] = p2[i,0]
        A[2*i,1] = p2[i,1]
        A[2*i,2] = p2[i,2]
        A[2*i,6] = -p1[i,0] / p1[i,2] * p2[i,0]
        A[2*i,7] = -p1[i,0] / p1[i,2] * p2[i,1]
        b[2*i] = p1[i,0] / p1[i,2] * p2[i,2]

        A[2*i+1,3] = p2[i,0]
        A[2*i+1,4] = p2[i,1]
        A[2*i+1,5] = p2[i,2]
        A[2*i+1,6] = -p1[i,1] / p1[i,2] * p2[i,0]
        A[2*i+1,7] = -p1[i,1] / p1[i,2] * p2[i,1]
        b[2*i+1] = p1[i,1] / p1[i,2] * p2[i,2]

    h = compute_linear(A,b)
    H = np.array([[h[0],h[1],h[2]],[h[3],h[4],h[5]],[h[6],h[7],1]], dtype = np.float32)
    return H

train_ll = [
            #[37.580000000, 126.890000000],
            [37.5842449247,126.885748401],
            [37.580768406,126.892740041],
            [37.5805676717,126.884474208],
            [37.575483524,126.894551239],
            [37.5737475654,126.898264297],
            [37.5671456335, 126.894441848],
            [37.5739628767, 126.886777531],
            [37.5799487541, 126.875696175],
            ]

train_xy = [
            #[0.00000000,0.0000000],
            [-379.66932279,467.730474031],
            [241.560750648,87.7109173108],
            [-488.374162443,58.5242221331],
            [407.134672186,-497.346780524],
            [736.985290603,-686.894595878],
            [406.280905806, -1422.8769894],
            [-277.994821235, -672.636601402],
            [-1263.12416461, -17.4350331983],
            ]

# bad data
test_ll = [[37.57542, 126.90067],
        [37.56768, 126.89364],
        [37.58018, 126.87628],
        [37.58492, 126.88435],
        [37.58000, 126.89000],
        [37.57953, 126.88273],
        [37.57685, 126.88827],
        [37.57307, 126.89306],
        ]
test_xy = [[947.44, -499.53],
        [334.57, -1364.46],
        [-1212.28, 8.70],
        [-504.28, 541.22],
        [0.00, 0.00],
        [-641.83, -58.12],
        [-149.95, -350.91],
        [277.52, -766.66],
        ]

train_num = 8
test_num = 8

ll_s = np.array(train_ll[:train_num])
ll_s[:,0] -= 37.58
ll_s[:,1] -= 126.89
ll_s *= 10000
xy_s = np.array(train_xy[:train_num])

H = compute_h(xy_s, ll_s)
print(H)

diff = 0
for i in range(test_num):
    xy = train_xy[i]
    tmpl = np.array([(train_ll[i][0] - 37.58)*10000, (train_ll[i][1]-126.89)*10000, 1])
    ret = np.matmul(H, tmpl)
    _x = ret[0]/ret[2]
    _y = ret[1]/ret[2]
    print("x : {0: 09.3f} ({1: 07.3f} cm), y : {2: 09.3f} ({3: 07.3f} cm)".format(_x, (_x - xy[0])*100, _y, (_y - xy[1])*100))
    diff += np.sqrt((_x - xy[0])**2 + (_y - xy[1])**2)

diff /= test_num
print("avg diff : {:5.3f} cm".format(diff*100))
